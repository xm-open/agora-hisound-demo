plugins {
    id 'com.android.application'
}
def localSdkPath= "${rootProject.projectDir.absolutePath}/app/libs"

android {
    compileSdk 30

    defaultConfig {
        applicationId "io.agora.rtc.extension.hisound"
        minSdk 21
        targetSdk 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            jniLibs.srcDirs += 'src/main/jniLibs'
            if(new File("${localSdkPath}").exists()){
                jniLibs.srcDirs += "${localSdkPath}"
            }
        }
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
//    implementation 'io.agora.rtc:full-sdk:4.1.0-1'
    implementation 'io.agora.rtc:full-sdk:4.1.1'
    implementation "io.agora.rtc:full-screen-sharing:4.1.0-1"

    if (getLocalPluginPath(project) != null) {
        implementation project(':plugin')
    } else {
        // implement aar
        implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
    }

    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.navigation:navigation-fragment:2.3.5'
    implementation 'androidx.navigation:navigation-ui:2.3.5'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation "com.squareup.okhttp3:okhttp:4.10.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.10.0"
    implementation 'com.yanzhenjie:permission:2.0.3'
}

static String getLocalPluginPath(Project project) {
    def rootProject = project.rootProject
    def localProperties = new Properties()
    def localPropertiesFile = rootProject.file('.plugin_dev.properties')
    if (!localPropertiesFile.exists()) {
        return null
    }

    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }

    def localPluginPath = localProperties.getProperty('local_plugin_path')
    if (localPluginPath == null) {
        throw new GradleException("local_plugin_path not found. Define location with local_plugin_path in the .plugin_dev.properties file.")
    }

    return localPluginPath
}
